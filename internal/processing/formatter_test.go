package processing

import (
	"encoding/base64"
	"testing"

	ct "github.com/google/certificate-transparency-go"
)

func TestGetFinalCertificateDer(t *testing.T) {
	t.Run("reconstructs final certificate from precert entry", func(t *testing.T) {
		// In a real log response for a precert, the leaf_input contains the TBS,
		// and the extra_data contains the final "poisoned" cert.
		leafInputFor140052 := "AAAAAAFelOdpjAAB43aJADBzoMZJzGVt6UbAMXTSXFZv48OAW4RvUjaUN5gAAtswggLXoAMCAQICBwVZdafzxKkwDQYJKoZIhvcNAQELBQAwfzELMAkGA1UEBhMCR0IxDzANBgNVBAgMBkxvbmRvbjEXMBUGA1UECgwOR29vZ2xlIFVLIEx0ZC4xITAfBgNVBAsMGENlcnRpZmljYXRlIFRyYW5zcGFyZW5jeTEjMCEGA1UEAwwaTWVyZ2UgRGVsYXkgSW50ZXJtZWRpYXRlIDEwHhcNMTcwOTE4MTIxMjI3WhcNMTcxMDAxMDI1NTUyWjBjMQswCQYDVQQGEwJHQjEPMA0GA1UEBwwGTG9uZG9uMSgwJgYDVQQKDB9Hb29nbGUgQ2VydGlmaWNhdGUgVHJhbnNwYXJlbmN5MRkwFwYDVQQFExAxNTA1NzM2NzQ3MzY5NjQxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAizCcbsTPTTGWZuFPxtnZpPTdpwnqtyS5F+0IqsVsLP+gCu6NqGJWz0WzheFNgnH/75p+NAOSvvoTpbGVbDpqNmE8PwNbwPYK7edVt2Q10U9GfstSEvj2A3WSqByuX74A7vFxkiailj76XCDc4UXxMfHi4PS6aGp76JvVEFq17GW9e7ad8zlLYOnw4ctWaxV1jmgx9s/tduPWvHfY72xXU6sKZ//n3gQ0GbmQr6EJN6dr40z8kFVIcAwd0Q9FE5Ii4qRAnlHEXGbo1KSyqRekSbbsUymFwjQMjjnU02UV+Kl3tqOwKnrqrXgbOBvri5N28zVHwvamx4HdyC7fSKZLjQIDAQABo4GLMIGIMBMGA1UdJQQMMAoGCCsGAQUFBwMBMCMGA1UdEQQcMBqCGGZsb3dlcnMtdG8tdGhlLXdvcmxkLmNvbTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFOk8BOGAL8KEEy0mcJ7y/RrPqv7GMB0GA1UdDgQWBBTKLiXBMg6H3ol9CG0iN/BYqRtkIQAA"
		// This is a simulated extra_data containing the final cert.
		// It's a TLS-encoded PrecertChainEntry.
		extraDataFor140052 := "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"

		expectedBase64 := "MIID+jCCAuKgAwIBAgIHBVl1p/PEqTANBgkqhkiG9w0BAQsFADB1MQswCQYDVQQGEwJHQjEPMA0GA1UEBwwGTG9uZG9uMTowOAYDVQQKDDFHb29nbGUgQ2VydGlmaWNhdGUgVHJhbnNwYXJlbmN5IChQcmVjZXJ0IFNpZ25pbmcpMRkwFwYDVQQFExAxNTA1NzM2NzQ3MDk3NDQ1MB4XDTE3MDkxODEyMTIyN1oXDTE3MTAwMTAyNTU1MlowYzELMAkGA1UEBhMCR0IxDzANBgNVBAcMBkxvbmRvbjEoMCYGA1UECgwfR29vZ2xlIENlcnRpZmljYXRlIFRyYW5zcGFyZW5jeTEZMBcGA1UEBRMQMTUwNTczNjc0NzM2OTY0MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIswnG7Ez00xlmbhT8bZ2aT03acJ6rckuRftCKrFbCz/oArujahiVs9Fs4XhTYJx/++afjQDkr76E6WxlWw6ajZhPD8DW8D2Cu3nVbdkNdFPRn7LUhL49gN1kqgcrl++AO7xcZImopY++lwg3OFF8THx4uD0umhqe+ib1RBatexlvXu2nfM5S2Dp8OHLVmsVdY5oMfbP7Xbj1rx32O9sV1OrCmf/594ENBm5kK+hCTena+NM/JBVSHAMHdEPRROSIuKkQJ5RxFxm6NSksqkXpEm27FMphcI0DI451NNlFfipd7ajsCp66q14Gzgb64uTdvM1R8L2pseB3cgu30imS40CAwEAAaOBoDCBnTATBgNVHSUEDDAKBggrBgEFBQcDATAjBgNVHREEHDAaghhmbG93ZXJzLXRvLXRoZS13b3JsZC5jb20wDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSCsHkJHYJNPTdqYnnG9sRHMg3U4zAdBgNVHQ4EFgQUyi4lwTIOh96JfQhtIjfwWKkbZCEwEwYKKwYBBAHWeQIEAwEB/wQCBQAwDQYJKoZIhvcNAQELBQADggEBAGd+lssGCDLvdnruskkEY10BTyD+rkbgpzhicJ4k7UOpbDNhWDV8UyQ0RaB9DBYdTSsod9wuunD8JAYPKcckXWb3h+0PfinEhsllC00aNURX6HHwJBsVAq0hp29DXQiiP8zZxmMARf3lwHgSuAcDK/npnprtLe4UUL0HjdY/NML6L93k1QzpACkdHWgJD1culMH9v+6IIUOiwhfWC+LarDyiH2Ganb/HsazLGJoaZ1z26ADkOSLov4/YgyWwD/NoBUrYBq3QcukSf5cRMbCkDWwL+zKMKlg0cTehtepHLgyftRbiKpKwKIAK2Qt5ZcXwnNZ9OkTtBU1jv1fm6uePCxY="

		leafInputBytes, _ := base64.StdEncoding.DecodeString(leafInputFor140052)
		extraDataBytes, _ := base64.StdEncoding.DecodeString(extraDataFor140052)

		entry := ct.LeafEntry{
			LeafInput: leafInputBytes,
			ExtraData: extraDataBytes,
		}

		derBytes, err := getFinalCertificateDer(entry)
		if err != nil {
			t.Fatalf("getFinalCertificateDer() failed: %v", err)
		}

		gotBase64 := base64.StdEncoding.EncodeToString(derBytes)
		if gotBase64 != expectedBase64 {
			t.Errorf("Base64 output does not match expected output.\nExpected: %s\nGot:      %s", expectedBase64, gotBase64)
		} else {
			t.Logf("Base64 output matches expected output: %s", gotBase64)
		}
	})
}
